from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import re

commands_router = Router(name="commands")

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class SearchStates(StatesGroup):
    waiting_for_dates = State()
    waiting_for_phrases = State()


@commands_router.message(CommandStart())
async def start_cmd(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ <b>–¢–µ–ª–µ–≥—Ä–∞–º</b>.\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>YYYY-MM-DD ‚Äî YYYY-MM-DD</code> "
        "–∏–ª–∏ <code>YYYY-MM-DD - YYYY-MM-DD</code>."
    )
    await state.set_state(SearchStates.waiting_for_dates)


# --- –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç ---
@commands_router.message(SearchStates.waiting_for_dates)
async def handle_dates(m: types.Message, state: FSMContext):
    text = m.text.strip()
    match = re.match(r"(\d{4}-\d{2}-\d{2})\s*[‚Äî-]\s*(\d{4}-\d{2}-\d{2})", text)
    if not match:
        await m.answer("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π <code>YYYY-MM-DD ‚Äî YYYY-MM-DD</code>.")
        return

    start_date, end_date = match.groups()
    await state.update_data(start_date=start_date, end_date=end_date)
    await m.answer(
        f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–Ω—è—Ç: <b>{start_date}</b> ‚Äî <b>{end_date}</b>.\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø–æ–¥–≤–æ–¥–∫–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ). "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await state.set_state(SearchStates.waiting_for_phrases)


# --- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã ---
@commands_router.message(SearchStates.waiting_for_phrases)
async def handle_phrases(m: types.Message, state: FSMContext):
    text = m.text.strip()
    phrases = [line.strip() for line in text.split("\n") if line.strip()]
    if not phrases:
        await m.answer("–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã. –ù–∞–ø–∏—à–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.")
        return

    data = await state.get_data()
    start_date = data.get("start_date")
    end_date = data.get("end_date")

    await m.answer(
        f"–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫‚Ä¶\n"
        f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω: <b>{start_date}</b> ‚Äî <b>{end_date}</b>\n"
        f"–§—Ä–∞–∑: {len(phrases)}"
    )
    # --- –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –≤—Å—Ç–∞–≤–∏–º –≤—ã–∑–æ–≤ Telemetr API ---
    await m.answer("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω (–∑–∞–≥–ª—É—à–∫–∞). –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å.")
    await state.clear()
