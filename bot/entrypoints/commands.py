from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import asyncio
import re
from typing import List

from bot.services.telemetr_search import search_telemetr
from bot.utils.formatting import fmt_result_card, fmt_summary, escape_md

commands_router = Router(name="commands")

class SearchStates(StatesGroup):
    waiting_for_dates = State()
    waiting_for_phrases = State()


@commands_router.message(CommandStart())
async def start_cmd(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ <b>–¢–µ–ª–µ–≥—Ä–∞–º</b>.\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>YYYY-MM-DD ‚Äî YYYY-MM-DD</code> "
        "–∏–ª–∏ <code>YYYY-MM-DD - YYYY-MM-DD</code>."
    )
    await state.set_state(SearchStates.waiting_for_dates)


@commands_router.message(SearchStates.waiting_for_dates)
async def handle_dates(m: types.Message, state: FSMContext):
    text = m.text.strip()
    match = re.match(r"(\d{4}-\d{2}-\d{2})\s*[‚Äî-]\s*(\d{4}-\d{2}-\d{2})", text)
    if not match:
        await m.answer("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π <code>YYYY-MM-DD ‚Äî YYYY-MM-DD</code>.")
        return
    start_date, end_date = match.groups()
    await state.update_data(start_date=start_date, end_date=end_date)
    await m.answer(
        f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–Ω—è—Ç: <b>{escape_md(start_date)}</b> ‚Äî <b>{escape_md(end_date)}</b>.\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø–æ–¥–≤–æ–¥–∫–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ). "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await state.set_state(SearchStates.waiting_for_phrases)


def _extract_phrases(text: str) -> List[str]:
    return [ln.strip() for ln in (text or "").splitlines() if ln.strip()]


@commands_router.message(SearchStates.waiting_for_phrases)
async def handle_phrases(m: types.Message, state: FSMContext):
    phrases = _extract_phrases(m.text)
    if not phrases:
        await m.answer("–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã. –ù–∞–ø–∏—à–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.")
        return

    data = await state.get_data()
    since = data.get("start_date")
    until = data.get("end_date")

    # —è–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å: —Å—Ç–∞—Ä—Ç
    status = await m.answer(
        "üîé –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫‚Ä¶\n"
        f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω: <b>{escape_md(since)}</b> ‚Äî <b>{escape_md(until)}</b>\n"
        f"–§—Ä–∞–∑: {len(phrases)}"
    )

    try:
        # —Å–∞–º –ø–æ–∏—Å–∫
        found, meta = await search_telemetr(phrases, since, until)

        # –æ—Ç—á—ë—Ç: —Å–∫–æ–ª—å–∫–æ –Ω–∞—à–ª–∏
        await status.edit_text(
            fmt_summary(total=meta.get("total", 0), matched=len(found), since=since, until=until, phrases=phrases)
        )

        if not found:
            await m.answer("‚ùóÔ∏è–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        # –æ—Ç–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫–∏ (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ ‚Äî Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏)
        for item in found[:30]:  # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å ‚Äî –æ—Ç–¥–∞—Ç—å –¥–æ 30 –∫–∞—Ä—Ç–æ—á–µ–∫
            await m.answer(fmt_result_card(item))
            await asyncio.sleep(0.15)

        if len(found) > 30:
            await m.answer(f"‚Ä¶–∏ –µ—â—ë {len(found) - 30} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏ —Ñ—Ä–∞–∑—É –∏–ª–∏ —Å—É–∑—å –¥–∏–∞–ø–∞–∑–æ–Ω, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—ë.")
    except Exception as e:
        # –ª—é–±–æ–π —Ñ—ç–π–ª ‚Äî –ø–æ–Ω—è—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        await status.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: <code>{escape_md(str(e))}</code>")
    finally:
        await state.clear()
