# bot/handlers/telemetr_search.py
# -*- coding: utf-8 -*-

from __future__ import annotations

import re
from datetime import datetime
from typing import List, Tuple

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.services.telemetr_search import search_telemetr

router = Router(name="telemetr_router")


# ------------------------- FSM -------------------------

class TelemetrStates(StatesGroup):
    waiting_range = State()
    waiting_seeds = State()


# --------------------- date parsing ---------------------

_DASHES = "\u2012\u2013\u2014\u2015\u2212-"  # —Ä–∞–∑–Ω—ã–µ —Ç–∏—Ä–µ –∏ –º–∏–Ω—É—Å + –æ–±—ã—á–Ω—ã–π –¥–µ—Ñ–∏—Å
_NBSP = "\u00A0"

def _normalize_spaces(s: str) -> str:
    # NBSP -> space, –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    return re.sub(r"[ \t" + _NBSP + r"]+", " ", s.strip(), flags=re.UNICODE)

def _normalize_dashes(s: str) -> str:
    # –≤—Å–µ —Ç–∏—Ä–µ -> –æ–±—ã—á–Ω—ã–π –¥–µ—Ñ–∏—Å
    return re.sub("[" + _DASHES + "]", "-", s)

def _normalize_separators(s: str) -> str:
    # —Ç–æ—á–∫–∏ –∏ —Å–ª–µ—à–∏ –≤ –¥–∞—Ç–∞—Ö -> –¥–µ—Ñ–∏—Å
    # 2025.10.23 / 2025/10/23 -> 2025-10-23
    s = re.sub(r"(\d{4})[./](\d{1,2})[./](\d{1,2})", r"\1-\2-\3", s)
    s = re.sub(r"(\d{1,2})[./-](\d{1,2})[./-](\d{4})", r"\1-\2-\3", s)
    return s

def _to_ymd(s: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–¥–Ω—É –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
      - YYYY-MM-DD
      - DD-MM-YYYY
    """
    s = s.strip()
    # ISO
    m = re.fullmatch(r"(\d{4})-(\d{1,2})-(\d{1,2})", s)
    if m:
        y, mo, d = map(int, m.groups())
        return f"{y:04d}-{mo:02d}-{d:02d}"

    # DD-MM-YYYY
    m = re.fullmatch(r"(\d{1,2})-(\d{1,2})-(\d{4})", s)
    if m:
        d, mo, y = map(int, m.groups())
        return f"{y:04d}-{mo:02d}-{d:02d}"

    raise ValueError(f"bad date: {s!r}")

def _parse_range(text: str) -> Tuple[str, str]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (since, until) –≤ YYYY-MM-DD.
    –¢–µ—Ä–ø–∏–º–∞ –∫:
      - —Ä–∞–∑–Ω—ã–º —Ç–∏—Ä–µ (‚Äì ‚Äî ‚àí -)
      - –ª–∏—à–Ω–∏–º/–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–º –ø—Ä–æ–±–µ–ª–∞–º
      - —Ñ–æ—Ä–º–∞—Ç–∞–º –¥–∞—Ç (YYYY-MM-DD / YYYY.MM.DD / YYYY/MM/DD / DD.MM.YYYY / DD-MM-YYYY)
    """
    s = _normalize_spaces(text)
    s = _normalize_dashes(s)
    s = _normalize_separators(s)

    # –¥–æ–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω –¥–µ—Ñ–∏—Å –≤ —Ä–æ–ª–∏ ¬´–º–∏–Ω—É—Å–∞¬ª –∏ –≤—Ç–æ—Ä–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî –ø–æ—ç—Ç–æ–º—É –∏—â–µ–º
    # –∏–º–µ–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏: –ø—Ä–æ–±–µ–ª? - –ø—Ä–æ–±–µ–ª?
    # –ü—Ä–∏–º–µ—Ä—ã: "2025-10-23 - 2025-10-24", "2025-10-23-2025-10-24"
    # –†–∞–∑—Ä–µ—à–∏–º –æ–¥–∏–Ω –¥–µ—Ñ–∏—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –Ω–µ—Ç.
    parts = re.split(r"\s*-\s*", s)
    if len(parts) != 2:
        # –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ ‚Äî —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –¥–µ—Ñ–∏—Å,
        # –∑–Ω–∞—á–∏—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–∑–¥–µ–ª–∏–ª–æ—Å—å –Ω–µ–≤–µ—Ä–Ω–æ -> –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∞–º—ã–π –ø—Ä–∞–≤—ã–π –¥–µ—Ñ–∏—Å –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:
        i = s.rfind("-")
        if i <= 0:
            raise ValueError("no delimiter")
        parts = [s[:i], s[i+1:]]

    left, right = parts[0], parts[1]
    since = _to_ymd(left)
    until = _to_ymd(right)

    # sanity-check
    if datetime.fromisoformat(until) < datetime.fromisoformat(since):
        since, until = until, since

    return since, until


# ---------------------- handlers ----------------------

@router.message(F.text == "/start")
async def start(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ **–¢–µ–ª–µ–≥—Ä–∞–º**.\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY-MM-DD  ‚Äî  YYYY-MM-DD`.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–∞–∫–∂–µ `DD.MM.YYYY` –∏ `YYYY.MM.DD`, –º–æ–∂–Ω–æ —Å –æ–±—ã—á–Ω—ã–º –¥–µ—Ñ–∏—Å–æ–º.\n"
        "–ü—Ä–∏–º–µ—Ä: `2025-10-22 ‚Äî 2025-10-25`",
        parse_mode="Markdown"
    )
    await state.set_state(TelemetrStates.waiting_range)


@router.message(TelemetrStates.waiting_range)
async def got_range(msg: Message, state: FSMContext):
    text = msg.text or ""
    try:
        since, until = _parse_range(text)
    except Exception:
        await msg.reply("–ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: `2025-10-22  ‚Äî  2025-10-25`", parse_mode="Markdown")
        return

    await state.update_data(since=since, until=until)
    await msg.answer(
        f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–Ω—è—Ç: **{since} ‚Äî {until}**.\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø–æ–¥–≤–æ–¥–∫–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        parse_mode="Markdown"
    )
    await state.set_state(TelemetrStates.waiting_seeds)


@router.message(TelemetrStates.waiting_seeds)
async def got_seeds_and_search(msg: Message, state: FSMContext):
    raw = (msg.text or "").strip()
    seeds: List[str] = [s.strip() for s in raw.splitlines() if s.strip()]
    if not seeds:
        await msg.reply("–ù–µ –≤–∏–∂—É —Ñ—Ä–∞–∑. –ü—Ä–∏—à–ª–∏ –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ.")
        return

    data = await state.get_data()
    since = data.get("since")
    until = data.get("until")

    await msg.answer("–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫‚Ä¶ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1‚Äì2 –º–∏–Ω—É—Ç –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")

    try:
        found, diag = await search_telemetr(seeds, since, until)
    except Exception as e:
        await msg.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e!r}")
        return

    # –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    total = len(found)
    by_seed = {}
    for it in found:
        by_seed.setdefault(it.get("_seed", ""), 0)
        by_seed[it.get("_seed", "")] += 1

    lines = [
        "–ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞",
        f"–î–∏–∞–ø–∞–∑–æ–Ω: **{since} ‚Äî {until}**",
        f"–§—Ä–∞–∑: {len(seeds)}",
        f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤—Å–µ–≥–æ: **{total}**",
    ]
    if by_seed:
        lines.append("")
        lines.append("–ü–æ —Ñ—Ä–∞–∑–∞–º:")
        for s, n in by_seed.items():
            lines.append(f"‚Ä¢ {s} ‚Äî {n}")

    await msg.answer("\n".join(lines), parse_mode="Markdown")

    if not found:
        await msg.answer("‚ùó–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —Å—Å—ã–ª–∫–∏
    shown = 0
    for it in found:
        link = it.get("_link") or ""
        body = (it.get("_body") or "").strip()
        if not link:
            continue
        shown += 1
        preview = body[:300] + ("‚Ä¶" if len(body) > 300 else "")
        await msg.answer(f"üîó {link}\n\n{preview}")
        if shown >= 10:
            break

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ –≤–∏–¥–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–¥–∞ (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç)
    await msg.answer(f"```\n{diag}\n```", parse_mode="Markdown")

    await state.clear()
